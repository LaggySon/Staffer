datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("user")
  biography     String?
  contactInfo   String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  logo        String
  description String
  contactInfo String
  socials     Social[]
}

model Social {
  id             String        @id @default(cuid())
  site           String
  handle         String
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Event {
  id       String   @id @default(cuid())
  name     String
  location String
  roles    Role[]
  date     DateTime
}

model Role {
  id           String  @id @default(cuid())
  title        String
  compensation String
  filled       Boolean
  Event        Event?  @relation(fields: [eventId], references: [id])
  eventId      String?
}
